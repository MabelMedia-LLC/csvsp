#!/usr/bin/python3

"""
csvsp C# VisualStudio Solution Generator, v1.0.2.
Copyright MabelMedia LLC.
"""

import os
from pathlib import Path
import stat
import sys
import uuid
from xml.dom import minidom

def Error(Message: str):
    print(f"[Error]: {Message}")
    PrintUsage()
    exit(1)

def PrintUsage():
    print("Usage:\n")
    print("csvsp create [Parent Folder] [Solution Name] [Project Name] [Project Type]")
    print("csvsp add-dependency [Parent Folder] [Solution Name] [Project Name] [Dependency File Name]")

def AddDependency():
    SolutionName = sys.argv[3]
    SolutionDir = f"{sys.argv[2]}/{SolutionName}/"
    if not os.path.exists(SolutionDir):
        Error("Solution Directory Doesn't Exist.")
    ProjectName = sys.argv[4]
    ProjectDir = f"{SolutionDir}{ProjectName}/"
    if not os.path.exists(ProjectDir):
        Error("Project Directory Doesn't Exist.")
    DependencyFileName = sys.argv[5]
    if not os.path.exists(DependencyFileName):
        Error("Dependency File Doesn't Exist.")
    ProjectTree = minidom.parse(f"{ProjectDir}{ProjectName}.csproj")
    DependencyNode = ProjectTree.createElement("Reference")
    DependencyNode.setAttribute("Include", Path(DependencyFileName).stem)
    HintPathNode = ProjectTree.createElement("HintPath")
    DependencyNode.appendChild(HintPathNode)
    HintPathText = ProjectTree.createTextNode(DependencyFileName.replace("/", "\\"))
    HintPathNode.appendChild(HintPathText)
    ProjectTree.childNodes[0].childNodes[7].appendChild(DependencyNode)
    ProjectTree.writexml(open(f"{ProjectDir}{ProjectName}.csproj", "w"))

def MakeExecutable(FileName):
    Mode = os.stat(FileName).st_mode
    Mode |= (Mode & 0o444) >> 2
    os.chmod(FileName, Mode)

def CreateSolution():
    ProjectType = "console"
    if len(sys.argv) >= 6:
        ProjectType = sys.argv[5]
    match ProjectType.lower():
        case "console":
            ProjectType = "Exe"
        case "graphical":
            ProjectType = "WinExe"
        case "library":
            ProjectType = "Library"
    SolutionName = sys.argv[3]
    SolutionDir = f"{sys.argv[2]}/{SolutionName}/"
    if os.path.exists(SolutionDir):
        Error("Solution Directory Already Exists.")
    os.mkdir(SolutionDir)
    with open(f"{SolutionDir}Build", "w") as BuildScriptFile:
        BuildScriptFile.writelines([
            "#!/bin/sh\n",
            "msbuild -p:Configuration=Release"
        ])
    MakeExecutable(f"{SolutionDir}Build")
    SolutionUUID = uuid.uuid4()
    ProjectName = sys.argv[4]
    with open(f"{SolutionDir}Run", "w") as RunScriptFile:
        RunScriptFile.writelines([
            "#!/bin/sh\n",
            f"mono {ProjectName}/bin/Release/{ProjectName}.exe $@"
        ])
    MakeExecutable(f"{SolutionDir}Run")
    ProjectUUID = uuid.uuid4()
    with open(f"{SolutionDir}{SolutionName}.sln", "w") as SolutionFile:
        SolutionFile.writelines([
            "Microsoft Visual Studio Solution File, Format Version 12.00\n",
            f"Project(\"{SolutionUUID}\") = \"{ProjectName}\", \"{ProjectName}\\{ProjectName}.csproj\", \"{ProjectUUID}\"\n",
            "EndProject\n",
            "Global\n",
            "\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n",
            "\t\tDebug|x86 = Debug|x86\n",
            "\t\tRelease|x86 = Release|x86\n",
            "\tEndGlobalSection\n",
            "\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n",
            f"\t\t{ProjectUUID}.Debug|x86.ActiveCfg = Debug|x86\n",
            f"\t\t{ProjectUUID}.Debug|x86.Build.0 = Debug|x86\n",
            f"\t\t{ProjectUUID}.Release|x86.ActiveCfg = Release|x86\n",
            f"\t\t{ProjectUUID}.Release|x86.Build.0 = Release|x86\n",
            "\tEndGlobalSection\n",
            "EndGlobal"
        ])
    ProjectDir = f"{SolutionDir}{ProjectName}/"
    ProjectPropertiesDir = f"{ProjectDir}Properties/"
    os.mkdir(ProjectDir)
    os.mkdir(ProjectPropertiesDir)
    with open(f"{ProjectPropertiesDir}AssemblyInfo.cs", "w") as ProjectPropertiesFile:
        ProjectPropertiesFile.writelines([
            "using System.Reflection;\n\n",
            f"[assembly: AssemblyTitle(\"{ProjectName}\")]\n",
            "[assembly: AssemblyDescription(\"\")]\n",
            "[assembly: AssemblyConfiguration(\"\")]\n",
            "[assembly: AssemblyCompany(\"\")]\n",
            f"[assembly: AssemblyProduct(\"{ProjectName}\")]\n",
            "[assembly: AssemblyCopyright(\"\")]\n",
            "[assembly: AssemblyTrademark(\"\")]\n",
            "[assembly: AssemblyCulture(\"\")]\n",
            "[assembly: AssemblyVersion(\"0.0.0\")]"])
    with open(f"{ProjectDir}MainClass.cs", "w") as TemplateSourceFile:
        TemplateSourceFile.writelines([
            "using System;\n\n",
            f"namespace {ProjectName} {{\n",
            "\tpublic static class MainClass {\n",
            "\t\tpublic static void Main(string[] CLA) {\n",
            "\t\t\tConsole.WriteLine(\"Hello, World!\");\n",
            "\t\t}\n",
            "\t}\n",
            "}"])
    with open(f"{ProjectDir}{ProjectName}.csproj", "w") as ProjectFile:
        ProjectFile.writelines([
            "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n",
            "<Project DefaultTargets=\"Build\" ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n",
            "\t<PropertyGroup>\n",
            "\t\t<Configuration Condition=\" '$(Configuration)' == '' \">Debug</Configuration>\n",
            "\t\t<Platform Condition=\" '$(Platform)' == '' \">x86</Platform>\n",
            f"\t\t<ProjectGuid>{{{ProjectUUID}}}</ProjectGuid>\n",
            f"\t\t<OutputType>{ProjectType}</OutputType>\n",
            f"\t\t<RootNamespace>{ProjectName}</RootNamespace>\n",
            f"\t\t<AssemblyName>{ProjectName}</AssemblyName>\n",
            "\t\t<TargetFrameworkVersion>v4.8</TargetFrameworkVersion>\n",
            "\t\t<ReleaseVersion>0.0.0.0</ReleaseVersion>\n",
            "\t</PropertyGroup>\n",
            "\t<PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|x86' \">\n",
            "\t\t<DebugSymbols>true</DebugSymbols>\n",
            "\t\t<DebugType>full</DebugType>\n",
            "\t\t<Optimize>false</Optimize>\n",
            "\t\t<OutputPath>bin\Debug</OutputPath>\n",
            "\t\t<DefineConstants>DEBUG;</DefineConstants>\n",
            "\t\t<ErrorReport>prompt</ErrorReport>\n",
            "\t\t<WarningLevel>4</WarningLevel>\n",
            "\t\t<ExternalConsole>true</ExternalConsole>\n",
            "\t\t<PlatformTarget>x86</PlatformTarget>\n",
            "\t\t<LangVersion>Latest</LangVersion>\n",
            "\t</PropertyGroup>\n",
            "\t<PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|x86' \">\n",
            "\t\t<Optimize>true</Optimize>\n",
            "\t\t<OutputPath>bin\Release</OutputPath>\n",
            "\t\t<ErrorReport>prompt</ErrorReport>\n",
            "\t\t<WarningLevel>4</WarningLevel>\n",
            "\t\t<ExternalConsole>true</ExternalConsole>\n",
            "\t\t<PlatformTarget>x64</PlatformTarget>\n",
            "\t\t<LangVersion>Latest</LangVersion>\n",
            "\t</PropertyGroup>\n",
            "\t<ItemGroup>\n",
            "\t\t<Reference Include=\"System\" />\n",
            "\t</ItemGroup>\n",
            "\t<ItemGroup>\n",
            "\t\t<Compile Include=\"MainClass.cs\" />\n",
            "\t\t<Compile Include=\"Properties\AssemblyInfo.cs\" />\n",
            "\t</ItemGroup>\n",
            "\t<Import Project=\"$(MSBuildBinPath)\Microsoft.CSharp.targets\" />\n",
            "</Project>"])

def Main():
    if len(sys.argv) < 2:
        Error("No Sub-Command Specified.")
    Command = sys.argv[1]
    match Command.lower():
        case "create":
            if len(sys.argv) < 5:
                Error("Sub-Command \"create\" Missing Arguments.")
            CreateSolution()
        case "add-dependency":
            if len(sys.argv) < 6:
                Error("Sub-Command \"add-dependancy\" Missing Arguments.")
            AddDependency()
        case _:
            Error(f"The Sub-Command: \"{Command.lower()}\" Is Not Valid.")

if __name__=="__main__":
    Main()
